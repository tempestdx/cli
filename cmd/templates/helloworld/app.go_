package {{ .PackageName }}

import (
	"context"
	_ "embed"
	"strconv"
	"time"

	// Tempest SDK defines interface between the app and Tempest API.
	"github.com/tempestdx/sdk-go/app"
)

// Embedding the schema files into the binary isn't necessary
// but it makes it easier to distribute the app as a single binary
// and keeps the codebase clean.
var (
	//go:embed properties_schema.json
	propertiesSchema []byte
	//go:embed create_schema.json
	createSchema []byte
)

// Tempest Apps operate on Resources. Good example of a resource would be
// VM instance or cloud storage bucket. But in reality what it represents
// is limited only by your imagination.
var resourceDefinition = app.ResourceDefinition{
	Type:             "example",
	DisplayName:      "Example Resource",
	LifecycleStage:   app.LifecycleStageCode,
	PropertiesSchema: app.MustParseJSONSchema(propertiesSchema),
}

// createFn is a function that will be invoked when the user requests the creation of a new resource.
func createFn(_ context.Context, req *app.OperationRequest) (*app.OperationResponse, error) {
	return &app.OperationResponse{
		Resource: &app.Resource{
			// ExternalID is a unique identifier for the resource. It is used to identify
			// the resource in Tempest. It is recommended to use a globally unique identifier
			// for this field.
			ExternalID:  strconv.Itoa(int(time.Now().Unix())),
			DisplayName: "Example Resource",
			// Properties allow you to define the resource specific metadata
			// that you want displayed and tracked in your software catalog.
			Properties: map[string]any{
				"name": req.Input["name"],
			},
		},
	}, nil
}

// App returns a new instance of the Tempest App.
// Used internally by the Tempest CLI to serve the app.
func App() *app.App {
	// Register the create operation with the resource definition.
	resourceDefinition.CreateFn(
		// our create function
		createFn,
		// schema for the create operation
		app.MustParseJSONSchema(createSchema),
	)

	// Return a new instance of the Tempest App with the defined resource.
	// One app can have multiple resources.
	return app.New(
		app.WithResourceDefinition(resourceDefinition),
	)
}
